name: Auto Release

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Auto-generate changeset from commits
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # If no tag exists, use first commit
          if [ -z "$LATEST_TAG" ]; then
            RANGE=$(git rev-list --max-parents=0 HEAD)..HEAD
          else
            RANGE=${LATEST_TAG}..HEAD
          fi
          
          # Check for conventional commits since last release
          FEAT_COUNT=$(git log $RANGE --oneline --grep="^feat" --grep="^feature" | wc -l)
          FIX_COUNT=$(git log $RANGE --oneline --grep="^fix" | wc -l)
          BREAKING_COUNT=$(git log $RANGE --oneline --grep="BREAKING CHANGE" | wc -l)
          
          echo "Features: $FEAT_COUNT, Fixes: $FIX_COUNT, Breaking: $BREAKING_COUNT"
          
          # Determine version bump type
          if [ $BREAKING_COUNT -gt 0 ]; then
            BUMP_TYPE="major"
          elif [ $FEAT_COUNT -gt 0 ]; then
            BUMP_TYPE="minor"
          elif [ $FIX_COUNT -gt 0 ]; then
            BUMP_TYPE="patch"
          else
            echo "No changes requiring version bump found"
            exit 0
          fi
          
          # Generate changeset summary
          CHANGESET_SUMMARY="Auto-generated changeset based on conventional commits"
          if [ $FEAT_COUNT -gt 0 ]; then
            CHANGESET_SUMMARY="$CHANGESET_SUMMARY\n\n### Features\n$(git log $RANGE --oneline --grep="^feat" --grep="^feature" | sed 's/^[a-f0-9]* /- /')"
          fi
          if [ $FIX_COUNT -gt 0 ]; then
            CHANGESET_SUMMARY="$CHANGESET_SUMMARY\n\n### Bug Fixes\n$(git log $RANGE --oneline --grep="^fix" | sed 's/^[a-f0-9]* /- /')"
          fi
          if [ $BREAKING_COUNT -gt 0 ]; then
            CHANGESET_SUMMARY="$CHANGESET_SUMMARY\n\n### Breaking Changes\n$(git log $RANGE --oneline --grep="BREAKING CHANGE" | sed 's/^[a-f0-9]* /- /')"
          fi
          
          # Create changeset file
          CHANGESET_ID=$(date +%s)
          cat > .changeset/${CHANGESET_ID}.md << EOF
          ---
          "payload-plugin-mcp": $BUMP_TYPE
          ---
          
          $CHANGESET_SUMMARY
          EOF
          
          echo "Created changeset for $BUMP_TYPE release"

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          publish: pnpm changeset publish
          title: 'chore: release package'
          commit: 'chore: release package'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}